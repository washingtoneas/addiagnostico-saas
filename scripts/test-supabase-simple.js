console.log("üß™ TESTE R√ÅPIDO DO SUPABASE")
console.log("=".repeat(40))

// Solicitar apenas as informa√ß√µes essenciais
const readline = require("readline")
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve)
  })
}

async function testSupabase() {
  try {
    console.log("üìã Vou testar sua configura√ß√£o do Supabase")
    console.log("Preciso de 3 informa√ß√µes:\n")

    const url = await question("1Ô∏è‚É£ Cole sua Project URL: ")
    const anonKey = await question("2Ô∏è‚É£ Cole sua Anon Key: ")
    const serviceKey = await question("3Ô∏è‚É£ Cole sua Service Role Key: ")

    console.log("\nüîç TESTANDO...")

    // Teste b√°sico de formato
    if (!url.includes("supabase.co")) {
      console.log("‚ùå URL parece incorreta. Deve conter 'supabase.co'")
      return
    }

    if (!anonKey.startsWith("eyJ")) {
      console.log("‚ùå Anon Key parece incorreta. Deve come√ßar com 'eyJ'")
      return
    }

    if (!serviceKey.startsWith("eyJ")) {
      console.log("‚ùå Service Key parece incorreta. Deve come√ßar com 'eyJ'")
      return
    }

    console.log("‚úÖ Formato das chaves: OK")

    // Criar arquivo .env
    const envContent = `# Configura√ß√£o Supabase
NEXT_PUBLIC_SUPABASE_URL=${url}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${anonKey}
SUPABASE_SERVICE_ROLE_KEY=${serviceKey}
NEXT_PUBLIC_APP_URL=http://localhost:3000
`

    require("fs").writeFileSync(".env.local", envContent)
    console.log("‚úÖ Arquivo .env.local criado!")

    console.log("\nüéâ TESTE CONCLU√çDO!")
    console.log("‚úÖ Suas chaves parecem corretas")
    console.log("‚úÖ Arquivo de configura√ß√£o criado")
    console.log("\nüöÄ Agora voc√™ pode testar o projeto:")
    console.log("npm run dev")
  } catch (error) {
    console.log("‚ùå Erro:", error.message)
  } finally {
    rl.close()
  }
}

testSupabase()
